//headers & declarations
#include <ArduinoJson.h>
#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ThingsBoard.h>
#include "DHT.h"
#define USE_AVG

// #define TOKEN ""   //Device - D2
 #define TOKEN ""   //Device - D1
#define DHTTYPE DHT22   // DHT 22 
//Wifi Config
//PINS for dht
#define DHTPIN 4
 //Pins for MQ135
int sensorValue;
float vol;
// Choose program options.
#define PRINT_RAW_DATA
#define USE_AVG

// Arduino pin numbers.
const int sharpLEDPin = 12;   // Arduino digital pin 7 connect to sensor LED.
const int sharpVoPin = 2;   // Arduino analog pin 5 connect to sensor Vo.

// For averaging last N raw voltage readings.
#ifdef USE_AVG
#define N 100
static unsigned long VoRawTotal = 0;
static int VoRawCount = 0;
#endif // USE_AVG

// Set the typical output voltage in Volts when there is zero dust. 
static float Voc = 0.6;

// Use the typical sensitivity in units of V per 100ug/m3.
const float K = 0.5;
  
/////////////////////////////////////////////////////////////////////////////


/*Put your SSID & Password*/
const char* ssid = "";  // Enter SSID here
const char* password = "";  //Enter Password here
char thingsboardServer[] = "82.165.115.180";

//wifi and thingsboard clients 
WiFiClient wifiClient;
ThingsBoard tb(wifiClient);
//end of client declaration
int status = WL_IDLE_STATUS;
unsigned long lastSend;

//Each sensor initialization
// Initialize DHT sensor.
int limit;
int value;
// DHT Sensor
uint8_t DHTPin = D4;

DHT dht(DHTPin, DHTTYPE);


float Temperature;
float Humidity;


/////////////////////////////////////////////////////////////////////////////

// Arduino setup function.
void setup() {
  // Set LED pin for output.
  pinMode(sharpLEDPin, OUTPUT);
  
  // Start the hardware serial port for the serial monitor.
  Serial.begin(9600);
  
  // Wait two seconds for startup.
  delay(2000);
  Serial.println("");
  Serial.println("GP2Y1014AU0F");
  Serial.println("=================");
  Serial.println("Started to ");
Serial.begin(9600);
delay(100);

Serial.println("Connecting to ");
Serial.println(ssid);
setupWiFi();


delay(100);

initDHT();
delay(100);
}

// Arduino main loop.
void loop() { 
  // put your main code here, to run repeatedly:
  delay(100);
   if ( !tb.connected() ) {

    reconnect();

  }
  

  if ( millis() - lastSend > 1000 ) {  // Update and send only after 1 seconds

      getAndSendTemperatureAndHumidityData();       //calling function to get temp & humidity and also air quality too.
     
    tb.loop();
  }
}// end of setup

void reconnect() {

  // Loop until we're reconnected

  while (!tb.connected()) {

    status = WiFi.status();

    if ( status != WL_CONNECTED) {

      WiFi.begin(ssid, password);

      while (WiFi.status() != WL_CONNECTED) {

        delay(500);

        Serial.print(".");

      }

      Serial.println("Connected to AP");

    }

    Serial.print("Connecting to ThingsBoard node ...");

    if ( tb.connect(thingsboardServer, TOKEN) ) {

      Serial.println( "[DONE]" );

    } else {

      Serial.print( "[FAILED]" );

      Serial.println( " : retrying in 5 seconds]" );

      // Wait 5 seconds before retrying

      delay( 5000 );

    }

  }

}//end of setup function



//setup wifi 
void setupWiFi(){

  //connect to your local wi-fi network
  WiFi.begin(ssid, password);
  //check wi-fi is connected to wi-fi network
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("WiFi connected..!");
  Serial.print("Got IP: "); 
  Serial.println(WiFi.localIP());
  Serial.print("\n========1=========");
}//end of setup wifi


//init dht
void initDHT(){
 dht.begin();

}//end of init dht

// Helper functions to print a data value to the serial monitor.
void printValue(String text, unsigned int value, bool isLast = false) {
  Serial.print(text);
  Serial.print("=");
  Serial.print(value);
  if (!isLast) {
    Serial.print(", ");
  }
}//end of print value


void printFValue(String text, float value, String units, bool isLast = false) {
  Serial.print(text);
  Serial.print("=");
  Serial.print(value);
  Serial.print(units);
  if (!isLast) {
    Serial.print(", ");
  }
}//end of print float value


//send temperature and humidity data 

void getAndSendTemperatureAndHumidityData(){

Serial.println("\n Collecting temperature data.");



// Reading temperature or humidity takes about 250 milliseconds!

float humidity = dht.readHumidity();
// Read temperature as Celsius (the default)
float temperature = dht.readTemperature();
// Check if any reads failed and exit early (to try again).

if (isnan(humidity) || isnan(temperature)) {

  Serial.println("Failed to read from DHT sensor!");

  return;

}

Serial.println("=================DHT 1=========================");

Serial.print("Humidity: ");

Serial.print(humidity);

Serial.print(" %\t");

Serial.print("Temperature: ");

Serial.print(temperature);

Serial.println(" *C ");


Serial.println("==========================================");

float tempav = (temperature);

float humav = (humidity);

Serial.print("Average Temperature : ");

Serial.print(tempav);

Serial.print("\n Average Humidity : ");

Serial.print(humav);

Serial.println("");
sensorValue = analogRead (A0);
// vol = (float)sesnorValue/1024*5.0;
Serial.println("Air Quality(MQ135)");
Serial.print("PPM = ");
//Serial.println(vol,1);
Serial.println(sensorValue);
float alcohol=0.0;
float benzene=0.0;
if (sensorValue <= 300){
  alcohol = sensorValue;
  Serial.print("NH3/Ammonia/Alcohol=");
  Serial.println(alcohol);
  
}
delay (1000);
if (sensorValue >=301)
{
  benzene = sensorValue;
 Serial.print("Benzene=");
 Serial.println(benzene);
}
delay (1000);

  
tb.sendTelemetryFloat("airquality", sensorValue);
tb.sendTelemetryFloat("CARBONDIOXIDE", sensorValue);
tb.sendTelemetryFloat("temperature", temperature);
tb.sendTelemetryFloat("humidity", humidity);
tb.sendTelemetryFloat("benzene",benzene);
tb.sendTelemetryFloat("alchohol", alcohol); //Device D1
// tb.sendTelemetryFloat("alcohol", alcohol); //Device D2



//dust sensor start

// Wait 0.28ms before taking a reading of the output voltage as per spec.
delayMicroseconds(280);

// Record the output voltage. This operation takes around 100 microseconds.
int VoRaw = analogRead(sharpVoPin);

// Turn the dust sensor LED off by setting digital pin HIGH.
//digitalWrite(sharpLEDPin, HIGH);

// Wait for remainder of the 10ms cycle = 10000 - 280 - 100 microseconds.
delayMicroseconds(9620);
  
  // Print raw voltage value (number from 0 to 1023).
//  #ifdef PRINT_RAW_DATA
  Serial.println("Dust Sensor");
printValue("VoRaw", VoRaw, true);
Serial.println("\n-------------------------------raw data -------------------------");
//  #endif // PRINT_RAW_DATA

// Use averaging if needed.
float Vo = VoRaw;
/*#ifdef USE_AVG
VoRawTotal += VoRaw;
VoRawCount++;
Serial.println("===============");
if ( VoRawCount >= N ) {
  Vo = 1.0 * VoRawTotal / N;
  VoRawCount = 0;
  VoRawTotal = 0;
} else {
  Serial.println("")
}

#endif */// USE_AVG

// Compute the output voltage in Volts.
Vo = Vo / 1024.0 * 5.0;
printFValue("Vo", Vo*1000.0, "mV");

// Convert to Dust Density in units of ug/m3.
float dV = Vo - Voc;
if ( dV < 0 ) {
  dV = 0;
  Voc = Vo;
}
float dustDensity = dV / K;
printFValue("DustDensity", dustDensity, "ug/m3", true);
//dust sensor end
tb.sendTelemetryFloat("DUSTNDANDDER", dustDensity);
}
// END PROGRAM
